name: Automatic Translation 4

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
  workflow_dispatch:

jobs:
  # Step 1: Copy original files to main, detect languages, and process commit message
  copy-original:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allows pushing commits to the repository
    outputs:
      languages: ${{ steps.detect-languages.outputs.languages }}
      commit-message: ${{ steps.get-latest-commit.outputs.latest-commit-message }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest commit message and sanitize it for branch name
        id: get-latest-commit
        run: |
          # Get and sanitize the latest commit message
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B main | tr '\n' ' ' | tr -dc '[:alnum:]-_ ')

          # Replace spaces with hyphens and truncate to a reasonable length for branch name
          SHORT_COMMIT_MESSAGE=$(echo "$LATEST_COMMIT_MESSAGE" | sed 's/ /-/g' | sed 's/--*/-/g' | sed 's/-$//g' | cut -c1-50)

          # If the sanitized message is empty or consists only of special characters, provide a default value
          if [[ -z "$SHORT_COMMIT_MESSAGE" ]]; then
            SHORT_COMMIT_MESSAGE="default-message"
          fi

          echo "Sanitized commit message: $SHORT_COMMIT_MESSAGE"
          echo "latest-commit-message=$SHORT_COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Detect languages from i18n folder
        id: detect-languages
        run: |
          # Detect the languages by listing directories under i18n/ with names that are exactly 2 or 5 characters long
          languages=$(find i18n -mindepth 1 -maxdepth 1 -type d | xargs -n 1 basename | grep -E '^.{2}$|^.{5}$')

          # Format the languages as a JSON array (single array, handle multiple lines correctly)
          languages_json=$(echo "$languages" | tr '\n' ' ' | awk '{printf "[\"%s\"", $1; for(i=2;i<=NF;i++) printf ",\"%s\"", $i; print "]"}')

          echo "Detected languages: $languages_json"
          echo "languages=$languages_json" >> $GITHUB_OUTPUT

      - name: Detect newly added files in the latest commit
        id: detect-new-files
        run: |
          # Detect new files added in the last commit and use a null delimiter
          new_files=$(git diff --name-status -z HEAD~1 HEAD | grep -z '^A' | cut -zf2-)
          echo "new-files=$new_files" >> $GITHUB_OUTPUT

          - name: Copy files to i18n folders
          run: |
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
            # Ensure we are up to date with the latest changes from remote
            git fetch origin
            git pull origin main --rebase
        
            # Find new files added in the last commit (use null-delimiter to handle spaces in filenames)
            new_files=$(git diff --name-status -z origin/main~1 origin/main | grep -z '^A' | cut -zf2-)
        
            if [ -z "$new_files" ]; then
              echo "No new files to copy."
              exit 0
            fi
        
            # Strip the JSON array format (remove brackets and quotes) to get the language list
            for lang in $(echo "${{ steps.detect-languages.outputs.languages }}" | sed 's/\[//g' | sed 's/\]//g' | sed 's/"//g' | tr ',' ' '); do
              echo "Processing language: $lang"
        
              # Iterate over each file using null as a delimiter for safe filename handling
              echo "$new_files" | tr '\0' '\n' | while IFS= read -r -d '' file; do
                relative_path=${file#docs/}
                destination_dir="i18n/$lang/docusaurus-plugin-content-docs/current/$(dirname "$relative_path")"
                
                # Create the destination directory if it doesn't exist
                mkdir -p "$destination_dir"
                
                # Copy the file to the destination directory
                cp "$file" "$destination_dir/"
                
                echo "Copied $file to $destination_dir"
              done
            done
        
            # Commit the changes to the main branch
            git add i18n/
            git commit -m "${{ steps.get-latest-commit.outputs.latest-commit-message }} - Add original files for all locales to main branch"
            git push origin main
        
# Step 2: Prepend language code and create translation branches (matrix mode)
  translate:
    needs: copy-original
    runs-on: ubuntu-latest

    permissions:
      contents: write     # Allows creating new branches and pushing commits
      pull-requests: write # Allows creating pull requests

    strategy:
      matrix:
        lang: ${{ fromJson(needs.copy-original.outputs.languages) }} # Dynamically use detected languages

    steps:
      - name: Debug languages output
        run: |
          echo "Languages output: ${{ needs.copy-original.outputs.languages }}"

      - name: Set environment variables for branch and commit message
        run: |
          LANG="${{ matrix.lang }}"
          COMMIT_MESSAGE="${{ needs.copy-original.outputs.commit-message }}"

          # Set BRANCH_NAME by combining LANG and COMMIT_MESSAGE
          BRANCH_NAME="locale-${LANG}-${COMMIT_MESSAGE}"

          # Write BRANCH_NAME and COMMIT_MESSAGE to GITHUB_ENV for use in subsequent steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
       
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create translation branch and prepend language code
        run: |
          LANG="${{ matrix.lang }}"
          # Use the environment variables set in the previous step
          echo "Using branch name: $BRANCH_NAME"
          echo "Using commit message: $COMMIT_MESSAGE"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Ensure we are on the latest main branch
          git fetch origin
          git checkout main
          git pull origin main

          # Create a new branch for this language
          git checkout -b "$BRANCH_NAME"

          # Handle filenames with spaces safely using a null-delimited loop
          echo "$new_files" | tr '\0' '\n' | while IFS= read -r -d '' file; do
            if [[ "$file" == *"/$LANG/"* ]]; then
              echo "Processing file: $file"

              # Create destination directory if necessary
              destination_dir="i18n/${LANG}/docusaurus-plugin-content-docs/current/$(dirname "$file")"
              mkdir -p "$destination_dir"
              
              # Copy the file and prepend the language code
              cp "$file" "$destination_dir/"
              target_file="$destination_dir/$(basename "$file")"
              echo "$LANG" | cat - "$target_file" > temp && mv temp "$target_file"
            fi
          done

          # Commit and push the changes to the new branch
          git add i18n/
          git commit -m "Prepended language code for locale-${LANG}"
          git push origin "$BRANCH_NAME"

      - name: Debug commit message
        run: |
          echo "Commit message: $COMMIT_MESSAGE"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LANG="${{ matrix.lang }}"
          # Use the BRANCH_NAME and COMMIT_MESSAGE from GITHUB_ENV

          echo "Commit message: $COMMIT_MESSAGE"

          gh pr create \
            --title "Translation for ${LANG}" \
            --body "This PR contains the translation modifications for the ${{ matrix.lang }} language." \
            --head "$BRANCH_NAME" \
            --base "main" \
            --label "${{ matrix.lang }},auto"

