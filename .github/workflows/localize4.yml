name: Automatic Translation 4

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
  workflow_dispatch:

jobs:
  # Step 1: Copy original files to main, detect languages, and process commit message
  copy-original:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allows pushing commits to the repository
    outputs:
      languages: ${{ steps.detect-languages.outputs.languages }}
      commit-message: ${{ steps.get-latest-commit.outputs.latest-commit-message }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest commit message and sanitize it for branch name
        id: get-latest-commit
        run: |
          # Fetch the latest commit message
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B main | tr '\n' ' ' | tr -dc '[:alnum:]-_ ')
          # Replace spaces with hyphens and truncate to a reasonable length for branch name
          SHORT_COMMIT_MESSAGE=$(echo "$LATEST_COMMIT_MESSAGE" | sed 's/ /-/g' | cut -c1-50)
          echo "latest-commit-message=${SHORT_COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          echo "Sanitized and shortened commit message for branch: $SHORT_COMMIT_MESSAGE"

      - name: Detect languages from i18n folder
        id: detect-languages
        run: |
          # Detect the languages by listing directories under i18n/ with names that are exactly 2 or 5 characters long
          languages=$(find i18n -mindepth 1 -maxdepth 1 -type d | xargs -n 1 basename | grep -E '^.{2}$|^.{5}$')

          # Format the languages as a JSON array (single array, handle multiple lines correctly)
          languages_json=$(echo "$languages" | tr '\n' ' ' | awk '{printf "[\"%s\"", $1; for(i=2;i<=NF;i++) printf ",\"%s\"", $i; print "]"}')

          echo "Detected languages: $languages_json"
          echo "languages=$languages_json" >> $GITHUB_OUTPUT
        
      - name: Copy files to i18n folders
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Ensure we are up to date with the latest changes from remote
          git fetch origin
          git pull origin main --rebase

          # Find new files added in the last commit
          new_files=$(git diff --name-status origin/main~1 origin/main | grep '^A' | cut -f2-)

          if [ -z "$new_files" ]; then
            echo "No new files to copy."
            exit 0
          fi

          # Copy the new files to the detected languages' i18n folders
          for lang in $(echo "${{ steps.detect-languages.outputs.languages }}" | tr ',' ' '); do
            while IFS= read -r file; do
              relative_path=${file#docs/}
              destination_dir="i18n/$lang/docusaurus-plugin-content-docs/current/$(dirname "$relative_path")"
              mkdir -p "$destination_dir"
              cp "$file" "$destination_dir/"
            done <<< "$new_files"
          done

          # Commit the changes to main branch
          git add i18n/
          git commit -m "${{ steps.get-latest-commit.outputs.latest-commit-message }} - Add original files for all locales to main branch"
          git push origin main

# Step 2: Prepend language code and create translation branches (matrix mode)
  translate:
    needs: copy-original
    runs-on: ubuntu-latest

    permissions:
      contents: write     # Allows creating new branches and pushing commits
      pull-requests: write # Allows creating pull requests

    strategy:
      matrix:
        lang: ${{ fromJson(needs.copy-original.outputs.languages) }} # Dynamically use detected languages

    steps:
      - name: Debug languages output
        run: |
          echo "Languages output: ${{ needs.copy-original.outputs.languages }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create translation branch and prepend language code
        run: |
          LANG="${{ matrix.lang }}"
          COMMIT_MESSAGE="${{ needs.copy-original.outputs.commit-message }}"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Ensure we are on the latest main branch
          git fetch origin
          git checkout main
          git pull origin main

          # Create a new branch for this language
          BRANCH_NAME="locale-${LANG}-${COMMIT_MESSAGE}"
          git checkout -b "$BRANCH_NAME"

          # Ensure we're in the i18n folder for the language
          for file in $(find "i18n/${LANG}/docusaurus-plugin-content-docs/current/" -type f); do
            # Prepend the language code to the file content
            echo "${LANG}" | cat - "$file" > temp && mv temp "$file"
          done

          # Commit and push the changes to the new branch
          git add i18n/
          git commit -m "Prepended language code for locale-${LANG}"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LANG="${{ matrix.lang }}"
          BRANCH_NAME="locale-${LANG}-${COMMIT_MESSAGE}"

          gh pr create \
            --title "Translation for ${LANG}" \
            --body "This PR contains the translation modifications for the ${{ matrix.lang }} language." \
            --head "$BRANCH_NAME" \
            --base "main" \
            --label "${{ matrix.lang }},auto"

