name: Automatic Translation 4

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
  workflow_dispatch:

jobs:
  localize:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write
    strategy:
      matrix:
        lang: ["fr", "ro"] # List of languages for localization

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest commit message and sanitize it for branch name
        id: get-latest-commit
        run: |
          # Fetch the latest commit message
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B main | tr '\n' ' ' | tr -dc '[:alnum:]-_ ')
          # Replace spaces with hyphens and truncate to a reasonable length for branch name
          SHORT_COMMIT_MESSAGE=$(echo "$LATEST_COMMIT_MESSAGE" | sed 's/ /-/g' | cut -c1-50)
          echo "latest-commit-message=${SHORT_COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          echo "Sanitized and shortened commit message for branch: $SHORT_COMMIT_MESSAGE"

      - name: Copy original file to main branch
        run: |
          LANG="${{ matrix.lang }}"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Ensure we are up to date with the latest changes from remote
          git fetch origin
          git pull origin main --rebase

          # Find new files added in the last commit
          new_files=$(git diff --name-status origin/main~1 origin/main | grep '^A' | cut -f2-)

          if [ -z "$new_files" ]; then
            echo "No new files to copy."
            exit 0
          fi

          # Copy the new files to the corresponding i18n folder without translation
          while IFS= read -r file; do
            relative_path=${file#docs/}
            destination_dir="i18n/${LANG}/docusaurus-plugin-content-docs/current/$(dirname "$relative_path")"
            mkdir -p "$destination_dir"
            cp "$file" "$destination_dir/"
          done <<< "$new_files"

          # Commit the changes to main branch
          git add i18n/
          git commit -m "Add original files for locale-${LANG} to main branch"
          git push origin main

      - name: Create new branch and prepend language code
        id: create-translation-branch
        run: |
          LANG="${{ matrix.lang }}"
          SHORT_COMMIT_MESSAGE="${{ steps.get-latest-commit.outputs.latest-commit-message }}"

          # Ensure we're on the main branch before creating a new branch
          git checkout main
          git pull origin main
          
          # Create a new branch based on main
          BRANCH_NAME="locale-${LANG}-${SHORT_COMMIT_MESSAGE}"
          git checkout -b "$BRANCH_NAME"

          # Find the copied files and prepend the language code
          new_files=$(git diff --name-status origin/main~1 origin/main | grep '^A' | cut -f2-)

          if [ -z "$new_files" ]; then
            echo "No new files to process."
            exit 0
          fi

          # Prepend the language code to the copied files
          while IFS= read -r file; do
            relative_path=${file#docs/}
            localization_file="i18n/${LANG}/docusaurus-plugin-content-docs/current/$relative_path"

            if [ -f "$localization_file" ]; then
              temp_file=$(mktemp)
              echo "${LANG}" | cat - "$localization_file" > "$temp_file" && mv "$temp_file" "$localization_file"
              echo "Prepended language code to file: $localization_file"
            else
              echo "Warning: Localization file '$localization_file' does not exist."
            fi
          done <<< "$new_files"

          # Commit the changes with the prepended language code
          git add i18n/
          git commit -m "Prepended language code for locale-${LANG} based on commit: ${SHORT_COMMIT_MESSAGE}"
          git push origin "$BRANCH_NAME"

          # Set outputs for later steps
          echo "branch-name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.create-translation-branch.outputs.branch-name != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-translation-branch.outputs.branch-name }}"
          SHORT_COMMIT_MESSAGE="${{ steps.get-latest-commit.outputs.latest-commit-message }}"

          gh pr create \
            --title "Translation for ${LANG} - ${SHORT_COMMIT_MESSAGE}" \
            --body "This PR contains automated modifications for the ${{ matrix.lang }} language, with the language code prepended." \
            --head "$BRANCH_NAME" \
            --base "main" \
            --label "${{ matrix.lang }},auto"
