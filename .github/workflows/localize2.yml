name: Automatic Translation

on:
  push:
    paths:
      - 'docs/**'
    branches:
      - main
  workflow_dispatch:
jobs:
  localize:
    runs-on: ubuntu-latest
    # outputs:  # only if I need to pass from one job to another
    #   branch-name: ${{ steps.create-branch.outputs.branch-name }}
    permissions:
      issues: write
      contents: write
    strategy:
      matrix:
       lang: ["fr", "ro"] # List of languages for localization

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy new file to locale branch for each language
        run: |
            LANG="${{ matrix.lang }}"

            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            # Fetch the latest changes from the remote repository
            git fetch origin
            git checkout main
            git pull origin main

            # Create or update the locale-[lang] branch from main
            git checkout -B "locale-${LANG}" main

            # Find new or modified files in the docs folder
            new_files=$(git diff --name-only main -- 'docs/*')

            # Check if there are new or modified files
            if [ -z "$new_files" ]; then
            echo "No new or modified files found."
            exit 0 # Exit gracefully
            fi

            # Copy new or modified files to the localization folder for the specific language
            while IFS= read -r file; do
            relative_path=${file#docs/}
            destination_dir="i18n/${LANG}/docusaurus-plugin-content-docs-current/$(dirname "$relative_path")"

            # Create the destination directory if it doesn't exist
            mkdir -p "$destination_dir"

            # Copy the file to the localization folder
            if [ -f "$file" ]; then
                cp "$file" "$destination_dir/"
            else
                echo "Warning: File '$file' does not exist."
            fi
            done <<< "$new_files"

            # Commit new or modified original files to locale-[lang]
            if [ -n "$(git status --porcelain)" ]; then
            git add i18n/
            git commit -m "Add original files to locale-${LANG} branch"
            git push origin "locale-${LANG}"
            else
            echo "No new or modified files to commit."
            fi

      - name: Create Translation Branch and Apply Changes
        id: create-branch
        run: |
            LANG="${{ matrix.lang }}"
            UNIQUE_ID=$(date +%s) # Generate a unique ID using the current timestamp
            BRANCH_NAME="translation-${LANG}-${UNIQUE_ID}"

            # Find all new or modified files in the localization folder
            git diff --name-only HEAD^ HEAD -- "i18n/${LANG}/docusaurus-plugin-content-docs-current/**/*.md" | while IFS= read -r file; do
            # Check if the file exists
            if [ -f "$file" ]; then
                # Prepend the language code at the beginning of each file
                temp_file=$(mktemp) # Create a unique temporary file
                echo "${LANG}" | cat - "$file" > "$temp_file" && mv "$temp_file" "$file"
            else
                echo "Warning: File '$file' does not exist."
            fi
            done
        
            # Check if there are any changes to commit
            if [ -n "$(git status --porcelain)" ]; then
            git add i18n/
            git commit -m "Inserted language code for locale-${{ matrix.lang }}"
            git push origin $BRANCH_NAME
            else
            echo "No new or modified files to commit after inserting language code."
            fi

            # Set outputs
            echo "branch-name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
            echo "unique-id=${UNIQUE_ID}" >> $GITHUB_OUTPUT

      - name: Get the latest commit message from the main branch
        id: get-latest-commit
        run: |
            LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B main)
              echo "latest-commit-message=${LATEST_COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request for translation
        uses: peter-evans/create-pull-request@v5
        with:
            branch: ${{ steps.create-branch.outputs.branch-name }}
            base: locale-${{ matrix.lang }}
            title: "Automated Translation Update for ${{ matrix.lang }} - Based on commit: '${{ steps.get-latest-commit.outputs.latest-commit-message }}'"
            body: "This PR contains automated modifications for the ${{ matrix.lang }} language and needs to be reviewed."
            #team-reviewers: "locale-${{ matrix.lang }}"
          