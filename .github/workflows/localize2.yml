name: Automatic Translation

on:
  push:
    paths:
      - 'docs/**'
    branches:
      - main
  workflow_dispatch:
jobs:
  localize:
    runs-on: ubuntu-latest
    # outputs:  # only if I need to pass from one job to another
    #   branch-name: ${{ steps.create-branch.outputs.branch-name }}
    permissions:
      issues: write
      contents: write
      pull-requests: write  # Explicitly add permissions for creating pull requests
    strategy:
      matrix:
       lang: ["fr", "ro"] # List of languages for localization

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Copy new file to locale branch for each language
        run: |
            LANG="${{ matrix.lang }}"

            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            # Fetch the latest changes from the remote repository
            git fetch origin
            git checkout main
            git pull origin main

            # Create or update the locale-[lang] branch from main
            git checkout -B "locale-${LANG}" main

            # Find new files in the docs folder added in the last commit
            new_files=$(git log -1 --diff-filter=A --name-only --pretty="" origin/main -- 'docs/*')

            # Check if there are new or modified files
            if [ -z "$new_files" ]; then
                echo "No new or modified files found."
                exit 0 # Exit gracefully
            fi

            # Copy new or modified files to the localization folder for the specific language
            while IFS= read -r file; do
                relative_path=${file#docs/}
                destination_dir="i18n/${LANG}/docusaurus-plugin-content-docs-current/$(dirname "$relative_path")"

                # Create the destination directory if it doesn't exist
                mkdir -p "$destination_dir"

                # Copy the file to the localization folder
                if [ -f "$file" ]; then
                    cp "$file" "$destination_dir/"
                else
                    echo "Warning: File '$file' does not exist."
                fi
            done <<< "$new_files"
            
            # Pull the latest changes from the remote locale-[lang] branch to prevent non-fast-forward error
            git pull origin "locale-${LANG}" --rebase

            # Commit new or modified original files to locale-[lang]
            if [ -n "$(git status --porcelain)" ]; then
            git add i18n/
            git commit -m "Add original files to locale-${LANG} branch"
            git push origin "locale-${LANG}"
            else
                echo "No new or modified files to commit."
                exit 0 # Exit gracefully
            fi

      - name: Create Translation Branch and Apply Changes
        id: create-branch
        run: |
                LANG="${{ matrix.lang }}"
                UNIQUE_ID=$(date +%s) # Generate a unique ID using the current timestamp
                BRANCH_NAME="translation-${LANG}-${UNIQUE_ID}"

                 echo "Switching to the locale branch for language: $LANG"
                git checkout "locale-${LANG}"
                git pull origin "locale-${LANG}"

                # Create a new branch for the translation based on locale-[lang]
                echo "Creating new branch for translation: $BRANCH_NAME"
                git checkout -b "$BRANCH_NAME"

                 # Display the current status for debugging
                echo "Current status after branch creation:"
                git status

                # Show the last commit on the locale branch for debugging
                echo "Last commit on remote 'origin/locale-${LANG}':"
                git log origin/"locale-${LANG}" -1 --oneline
                
                # Process the new files directly instead of using git diff
                new_files=$(git log -1 --diff-filter=A --name-only --pretty="" origin/main -- 'docs/*')

                if [ -z "$new_files" ]; then
                    echo "No new added files to process."
                    exit 0 # Exit gracefully
                fi
                
                echo "New files to process: $new_files"

                # Loop over the new files and prepend the language code
                while IFS= read -r file; do
                    relative_path=${file#docs/}
                    localization_file="i18n/${LANG}/docusaurus-plugin-content-docs-current/$relative_path"

                    # Prepend the language code at the beginning of each file
                    if [ -f "$localization_file" ]; then
                        temp_file=$(mktemp) # Create a unique temporary file
                        echo "${LANG}" | cat - "$localization_file" > "$temp_file" && mv "$temp_file" "$localization_file"
                        echo "Prepended language code to file: $localization_file"
                    else
                        echo "Warning: Localization file '$localization_file' does not exist."
                    fi
                done <<< "$new_files"

                # Display the status before committing changes for debugging
                echo "Status before committing changes:"
                git status

                # Commit the changes
                if [ -n "$(git status --porcelain)" ]; then
                    echo "Changes detected. Committing changes..."
                    git add i18n/
                    git commit -m "Inserted language code for locale-${LANG}"
                    
                    # Debug message before push
                    echo "Pushing changes to remote branch: $BRANCH_NAME"
                    git push --set-upstream origin "$BRANCH_NAME"
                    
                    # Debug message after push
                    if [ $? -eq 0 ]; then
                        echo "Push to remote branch '$BRANCH_NAME' was successful."
                        # Print the log of the last commit on the pushed branch
                        echo "Last commit on branch '$BRANCH_NAME':"
                        git log -1 --oneline
                    else
                        echo "Push to remote branch '$BRANCH_NAME' failed."
                        exit 1 # Exit with an error
                    fi

                    echo "Changes committed and pushed to branch: $BRANCH_NAME"
                    # Set outputs
                    echo "branch-name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
                    echo "unique-id=${UNIQUE_ID}" >> $GITHUB_OUTPUT
                else
                    echo "No new or modified files to commit after inserting language code."
                    exit 0 # Exit gracefully
                fi

      - name: Get the latest commit message from the main branch
        id: get-latest-commit
        run: |
            LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=%B main)
            echo "latest-commit-message=${LATEST_COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.create-branch.outputs.branch-name != '' # Only create a PR if a branch was created
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              BRANCH_NAME="${{ steps.create-branch.outputs.branch-name }}"
              gh pr create --title "Automated Translation Update for ${{ matrix.lang }}" --body "This PR contains automated modifications for the ${{ matrix.lang }} language and needs to be reviewed." --head $BRANCH_NAME --base "locale-${{ matrix.lang }}"
    #   - name: Create Pull Request for translation
    #     uses: peter-evans/create-pull-request@v7
    #     if: steps.create-branch.outputs.branch-name != '' # Only create a PR if a branch was created
    #     with:
    #         branch: ${{ steps.create-branch.outputs.branch-name }}
    #         base: locale-${{ matrix.lang }}
    #         title: "Automated Translation Update for ${{ matrix.lang }} - Based on commit: '${{ steps.get-latest-commit.outputs.latest-commit-message }}'"
    #         body: "This PR contains automated modifications for the ${{ matrix.lang }} language and needs to be reviewed."
    #         #team-reviewers: "locale-${{ matrix.lang }}"
    #         delete-branch: false
    #         branch-suffix: timestamp
          